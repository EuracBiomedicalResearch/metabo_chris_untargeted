unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M-H]-","[M-H+HCOOH]-","[M+Cl]-")))
my.compound <- "uric"
i <- which(std_info$abbreviation == my.compound)
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M-H]-","[M-H+HCOOH]-","[M+Cl]-")))
my.compound <- "eplerone"
i <- which(std_info$abbreviation == my.compound)
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M-H]-","[M-H+HCOOH]-","[M+Cl]-")))
my.compound <- "UDP_glucuronate"
i <- which(std_info$abbreviation == my.compound)
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
library(Rdisop)
library(CompoundDb)
std_info <- read.table(
"C:/Users/vveri/Documents/GitHub/lcms-standards/data/standards_dilution.txt",
sep = "\t", header = TRUE, as.is = TRUE)
for(i in 1:nrow(std_info)){
std_info$mz_neutral[i] <- getMolecule(as.character(std_info$formula[i]))$exactmass
}
my.compound <- "UDP_glucuronate"
i <- which(std_info$abbreviation == my.compound)
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M-H]-","[M-H+HCOOH]-","[M+Cl]-")))
my.compound <- "fructose"
i <- which(std_info$abbreviation == my.compound)
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M-H]-","[M-H+HCOOH]-","[M+Cl]-")))
my.compound <- "tetrahydrobiopterin"
i <- which(std_info$abbreviation == my.compound)
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M-H]-","[M-H+HCOOH]-","[M+Cl]-")))
my.compound <- "phosphoribosyl_pyrophosphate"
i <- which(std_info$abbreviation == my.compound)
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M-H]-","[M-H+HCOOH]-","[M+Cl]-")))
my.compound <- "tetrahydrobiopterin"
i <- which(std_info$abbreviation == my.compound)
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M-H]-","[M-H+HCOOH]-","[M+Cl]-")))
my.compound <- "phosphoribosyl_pyrophosphate"
i <- which(std_info$abbreviation == my.compound)
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M-H]-","[M-H+HCOOH]-","[M+Cl]-")))
my.compound <- "fructose"
i <- which(std_info$abbreviation == my.compound)
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M-H]-","[M-H+HCOOH]-","[M+Cl]-")))
my.compound <- "fructose_diphosphate"
i <- which(std_info$abbreviation == my.compound)
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M+H]+", "[M+Na]+", "[M+NH4]+", "[M+H-H2O]+", "[2M+H]+")))
unlist(mass2mz(std_info$mz_neutral[i], adduct = c("[M-H]-","[M-H+HCOOH]-","[M+Cl]-")))
library("XML")
library("methods")
devtools::install_github("EuracBiomedicalResearch/CompMetaboTools", ref = "jomaster")
devtools::install_github("sneumann/xcms", ref = "jomaster")
devtools::install_github("sneumann/xcms", ref = "jomaster")
devtools::install_github("sneumann/xcms", ref = "jomaster")
library(devtools)
devtools::install_github("sneumann/xcms", ref = "jomaster")
devtools::install_github("EuracBiomedicalResearch/CompMetaboTools", ref = "jomaster")
library(Rcpp)
devtools::install_github("EuracBiomedicalResearch/CompMetaboTools", ref = "jomaster")
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true")
devtools::install_github("EuracBiomedicalResearch/CompMetaboTools", ref = "jomaster")
setwd("~/GitHub/metabo_chris_untargeted")
# Chunk 1: biocstyle
library(BiocStyle)
BiocStyle::markdown()
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
# Chunk 2: settings
## Set general options
options(useFancyQuotes = FALSE)
set.seed(123)
## Define paths:
filename <- "random_QC_samples"
## Path to save the images; remove all old images.
IMAGE_PATH <- paste0("images/", filename, "/")
dir.create(IMAGE_PATH, recursive = TRUE, showWarnings = FALSE)
## Path to store RData files
RDATA_PATH <- paste0("data/RData/", filename, "/")
dir.create(RDATA_PATH, recursive = TRUE, showWarnings = FALSE)
## Get the number of cpus allocated or fall back to 6
ncores <- as.integer(Sys.getenv("SLURM_JOB_CPUS_PER_NODE", 6))
rt_cut <- 340
MZML_PATH <- "mzML/"
if (!dir.exists(MZML_PATH))
stop("Can not find the directory with the mzML files: ", MZML_PATH)
# Chunk 3: libraries
library(readxl)
library(RColorBrewer)
library(xcms)
library(CompMetaboTools)
library(Spectra)
injections <- as.data.frame(read_xlsx("QC-2016-2020_09_forTrial.xlsx"))
pd_pos <- injections
# Chunk 4: pos-load
data_pos <- readMSData(files = paste0(MZML_PATH, pd_pos$mzML),
pdata = as(AnnotatedDataFrame(pd_pos),
"NAnnotatedDataFrame"),
mode = "onDisk")
data_pos <- filterRt(data_pos, c(0, rt_cut))
data_pos <- selectFeatureData(
data_pos, fcol = c("fileIdx", "spIdx", "acquisitionNum", "retentionTime",
"msLevel", "precursorScanNum", "polarity", "centroided",
"seqNum")
)
# Chunk 5: pos-peak-detection
cwp <- CentWaveParam(
peakwidth = c(2, 20),
ppm = 50,
snthresh = 5,
mzdiff = 0.001,
prefilter = c(3, 500),
noise = 100,
integrate = 2)
register(MulticoreParam(ncores))
tm <- system.time(
data_pos <- findChromPeaks(data_pos, param = cwp)
)
save(data_pos, file = paste0(RDATA_PATH, "data_pos.RData"))
# Chunk 6: pos-peak-detection-load
load(paste0(RDATA_PATH, "data_pos.RData"))
if (!any(ls() == "tm"))
tm <- c(elapsed = 1)
# Chunk 7: pos-peak-refinement
mnp <- MergeNeighboringPeaksParam(
expandRt = 2,
expandMz = 0.001,
ppm = 10,
minProp = 0.66)
## register(MulticoreParam(workers = ceiling(ncores * 2/3),
##                         timeout = 86400L))
tm <- system.time(
data_pos <- refineChromPeaks(data_pos, param = mnp, BPPARAM = bpparam())
)
save(data_pos, file = paste0(RDATA_PATH, "data_pos_ref.RData"))
# Chunk 8: pos-peak-refinement-load
load(paste0(RDATA_PATH, "data_pos_ref.RData"))
if (!any(ls() == "tm"))
tm <- c(elapsed = 1)
# Chunk 9: chrs
bpchr <- chromatogram(as(data_pos, "OnDiskMSnExp"), aggregationFun = "max")
tichr <- chromatogram(as(data_pos, "OnDiskMSnExp"), aggregationFun = "sum")
col_year_month <- brewer.pal(8, "Set1")[-6]
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[bpchr$year_month], 80), main = "BPC",
xlim = c(0, 220))
grid()
legend("topright", legend = names(col_year_month), lty = 1, col = col_year_month)
plot(tichr, col = paste0(col_year_month[tichr$year_month], 80), main = "TIC",
xlim = c(0, 220))
grid()
col_year_month <- brewer.pal(3, "Set1")[-6]
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[bpchr$year_month], 80), main = "BPC",
xlim = c(0, 220))
grid()
legend("topright", legend = names(col_year_month), lty = 1, col = col_year_month)
plot(tichr, col = paste0(col_year_month[tichr$year_month], 80), main = "TIC",
xlim = c(0, 220))
grid()
col_year_month <- brewer.pal(4, "Set1")[-6]
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[bpchr$year_month], 80), main = "BPC",
xlim = c(0, 220))
grid()
legend("topright", legend = names(col_year_month), lty = 1, col = col_year_month)
plot(tichr, col = paste0(col_year_month[tichr$year_month], 80), main = "TIC",
xlim = c(0, 220))
grid()
col_year_month <- brewer.pal(2, "Set1")[-6]
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[bpchr$year_month], 80), main = "BPC",
xlim = c(0, 220))
grid()
legend("topright", legend = names(col_year_month), lty = 1, col = col_year_month)
plot(tichr, col = paste0(col_year_month[tichr$year_month], 80), main = "TIC",
xlim = c(0, 220))
grid()
col_year_month <- brewer.pal(2, "Set1")
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[bpchr$year_month], 80), main = "BPC",
xlim = c(0, 220))
grid()
legend("topright", legend = names(col_year_month), lty = 1, col = col_year_month)
plot(tichr, col = paste0(col_year_month[tichr$year_month], 80), main = "TIC",
xlim = c(0, 220))
grid()
col_year_month <- brewer.pal(3, "Set1")[-6]
names(col_year_month) <- unique(data_pos$year_month)
names(col_year_month)
col_year_month <- brewer.pal(2, "Set1")[-6]
names(col_year_month) <- unique(data_pos$year_month)
col_year_month <- brewer.pal(2, "Set1")
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[bpchr$year_month], 80), main = "BPC",
xlim = c(0, 220))
unique(data_pos$year_month)
col_year_month <- brewer.pal(2, "Set1")
col_year_month <- brewer.pal(3, "Set1")[-6]
names(col_year_month) <- unique(data_pos$year_month)
col_year_month <- brewer.pal(3, "Set1")[-3]
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[bpchr$year_month], 80), main = "BPC",
xlim = c(0, 220))
grid()
plot(bpchr, col = paste0(col_year_month[bpchr$year_month], 80), main = "BPC",
xlim = c(0, 220))
col_year_month
col_year_month <- brewer.pal(3, "Set1")[-3]
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[bpchr$year_month], 80), main = "BPC",
xlim = c(0, 220))
paste0(col_year_month[bpchr$year_month], 80)
bpchr$year_month
col_year_month <- brewer.pal(3, "Set1")[-3]
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[bpchr$year_month], 80), main = "BPC",
xlim = c(0, 220))
grid()
legend("topright", legend = names(col_year_month), lty = 1, col = col_year_month)
plot(tichr, col = paste0(col_year_month[tichr$year_month], 80), main = "TIC",
xlim = c(0, 220))
grid()
names(col_year_month)
col_year_month
col_year_month <- brewer.pal(3, "Set1")[-3]
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[as.character(bpchr$year_month)], 80), main = "BPC",
xlim = c(0, 220))
grid()
legend("topright", legend = names(col_year_month), lty = 1, col = col_year_month)
plot(tichr, col = paste0(col_year_month[tichr$year_month], 80), main = "TIC",
xlim = c(0, 220))
grid()
col_year_month <- brewer.pal(3, "Set1")[-3]
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[as.character(bpchr$year_month)], 80), main = "BPC",
xlim = c(0, 220))
grid()
legend("topright", legend = names(col_year_month), lty = 1, col = col_year_month)
plot(tichr, col = paste0(col_year_month[tichr$year_month], 80), main = "TIC",
xlim = c(0, 220))
grid()
col_year_month <- brewer.pal(3, "Set1")[-3]
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[as.character(bpchr$year_month)], 80), main = "BPC",
xlim = c(0, 220))
grid()
legend("topright", legend = names(col_year_month), lty = 1, col = col_year_month)
col_year_month <- brewer.pal(3, "Set1")[-3]
names(col_year_month) <- unique(data_pos$year_month)
par(mfrow = c(2, 1), mar = c(2, 4.5, 2, 1))
plot(bpchr, col = paste0(col_year_month[as.character(bpchr$year_month)], 80), main = "BPC",
xlim = c(0, 220))
grid()
legend("topright", legend = names(col_year_month), lty = 1, col = col_year_month)
plot(tichr, col = paste0(col_year_month[as.character(tichr$year_month)], 80), main = "TIC",
xlim = c(0, 220))
grid()
par(mfrow = c(2, 1), mar = c(1, 4.5, 1, 1))
boxplot(lapply(bpchr, function(z) log2(intensity(z))), outline = FALSE,
ylab = expression(log[2]~base~peak~intensity), xaxt = "n",
main = "QC samples, positive polarity",
col = paste0(col_year_month[bpchr$year_month], 40))
grid(nx = NA, ny = NULL)
boxplot(lapply(tichr, function(z) log2(intensity(z))), outline = FALSE,
ylab = expression(log[2]~total~ion~intensity), xaxt = "n",
main = "QC samples, positive polarity",
col = paste0(col_year_month[tichr$year_month], 40))
grid(nx = NA, ny = NULL)
par(mfrow = c(2, 1), mar = c(1, 4.5, 1, 1))
boxplot(lapply(bpchr, function(z) log2(intensity(z))), outline = FALSE,
ylab = expression(log[2]~base~peak~intensity), xaxt = "n",
main = "QC samples, positive polarity",
col = paste0(col_year_month[as.character(bpchr$year_month)], 40))
grid(nx = NA, ny = NULL)
boxplot(lapply(tichr, function(z) log2(intensity(z))), outline = FALSE,
ylab = expression(log[2]~total~ion~intensity), xaxt = "n",
main = "QC samples, positive polarity",
col = paste0(col_year_month[as.character(tichr$year_month)], 40))
grid(nx = NA, ny = NULL)
par(mfrow = c(2, 1), mar = c(1, 4.5, 1, 1))
boxplot(lapply(bpchr, function(z) log2(intensity(z))), outline = FALSE,
ylab = expression(log[2]~base~peak~intensity), xaxt = "n",
main = "QC samples, positive polarity",
col = paste0(col_year_month[as.character(bpchr$year_month)], 40))
grid(nx = NA, ny = NULL)
boxplot(lapply(tichr, function(z) log2(intensity(z))), outline = FALSE,
ylab = expression(log[2]~total~ion~intensity), xaxt = "n",
main = "QC samples, positive polarity",
col = paste0(col_year_month[as.character(tichr$year_month)], 40))
grid(nx = NA, ny = NULL)
library(pander)
T <- matrix(as.integer(table(chromPeaks(data_pos)[, "sample"])), ncol = 1)
colnames(T) <- "peak count"
rownames(T) <- data_pos$name
T <- data.frame(T, year = data_pos$year, month = data_pos$month,
day = data_pos$day, check.names = FALSE)
pandoc.table(T, style = "rmarkdown",
caption = "Number of peaks identified in each sample")
library(CompoundDb)
library(Rdisop)
std_info <- read.table("internal_standards.txt",
# "https://raw.githubusercontent.com/EuracBiomedicalResearch/lcms-standards/master/data/standards_dilution.txt",
## "data/standards_dilution.txt",
sep = "\t", header = TRUE, as.is = TRUE)
std_info <- std_info[!is.na(std_info[, "POS"]), ]
rownames(std_info) <- 1:nrow(std_info)
std_info$mzneut = NA
std_info$mz_ion = NA
for (i in seq(nrow(std_info))) {
if (grepl("C", std_info$formula[i])){
std_info$mzneut[i] <- getMolecule(
as.character(std_info$formula[i]))$exactmass
} else {
std_info$mzneut[i] = as.numeric(std_info$formula[i])
}
## Calculate also the m/z
std_info$mz_ion[i] <- unlist(
mass2mz(std_info$mzneut[i],
adduct = as.character(
std_info[i, "POS"])))
}
## Two-step approach: define first the rt/mz region for each standard and
## Extract the chromatogram afterwards.
std_info_mz_rt <- matrix(
ncol = 4, nrow = nrow(std_info),
dimnames = list(std_info$name, c("mzmin", "mzmax", "rtmin", "rtmax")))
for (i in 1:nrow(std_info)) {
pks <- chromPeaks(data_pos, mz = std_info$mz_ion[i], ppm = 50)
if (nrow(pks)) {
rtdiff <- abs(pks[, "rt"] - std_info$RT[i])
keep <- which(rtdiff < 40)
if (length(keep)) {
pks <- pks[keep, , drop = FALSE]
mzr <- range(pks[, c("mzmin", "mzmax")])
rtr <- range(pks[, c("rtmin", "rtmax")], std_info$RT[i])
std_info_mz_rt[i, ] <- c(mzr, rtr)
}
}
}
std_info <- std_info[!is.na(std_info_mz_rt[, "mzmin"]), ]
std_info_mz_rt <- std_info_mz_rt[!is.na(std_info_mz_rt[, "mzmin"]), ]
## Extract the ion chromatogram for each standard
rtr <- std_info_mz_rt[, c("rtmin", "rtmax")]
rtr[, 1] <- rtr[, 1] - 10
rtr[, 2] <- rtr[, 2] + 10
std_info_chr <- chromatogram(
data_pos, mz = std_info_mz_rt[, c("mzmin", "mzmax")],
rt = rtr, aggregationFun = "max")
## Plot the extracted ion chromatograms
dr <- paste0(IMAGE_PATH, "peakdetection/")
dir.create(dr, recursive = TRUE, showWarnings = FALSE)
sample_colors <- col_year_month[as.character(data_pos$year_month)]
for (i in 1:nrow(std_info)) {
cmpname <- gsub("L-", "", std_info$name[i])
cmpname <- tolower(gsub(" .*", "", cmpname))
filename <- paste0(dr, i, "-", cmpname, "_", "POS", ".png")
png(file = filename, width = 16, height = 8, units = "cm",
res = 300, pointsize = 4)
chr <- std_info_chr[i, ]
pks <- chromPeaks(chr)
plot(chr, col = "#00000040",
main = paste0(std_info$name[i], ": ",
format(mz(chr)[1], digits = 6), "-",
format(mz(chr)[2], digits = 6)),
peakCol = paste0(sample_colors[pks[, "column"]], 50),
peakBg = paste0(sample_colors[pks[, "column"]], 10))
## This is just to indicate identified peaks with a rectangle.
xcms:::.add_chromatogram_peaks(
chr, pks,
col = paste0(sample_colors[pks[, "column"]], 40),
bg = NA,
type = "rectangle")
abline(v = std_info$RT[i])
dev.off()
}
library(CompoundDb)
library(Rdisop)
std_info <- read.table("internal_standards.txt",
# "https://raw.githubusercontent.com/EuracBiomedicalResearch/lcms-standards/master/data/standards_dilution.txt",
## "data/standards_dilution.txt",
sep = "\t", header = TRUE, as.is = TRUE)
std_info <- std_info[!is.na(std_info[, "POS"]), ]
rownames(std_info) <- 1:nrow(std_info)
std_info$mzneut = NA
std_info$mz_ion = NA
for (i in seq(nrow(std_info))) {
if (grepl("C", std_info$formula[i])){
std_info$mzneut[i] <- getMolecule(
as.character(std_info$formula[i]))$exactmass
} else {
std_info$mzneut[i] = as.numeric(std_info$formula[i])
}
## Calculate also the m/z
std_info$mz_ion[i] <- unlist(
mass2mz(std_info$mzneut[i],
adduct = as.character(
std_info[i, "POS"])))
}
std_info_mz_rt <- matrix(
ncol = 4, nrow = nrow(std_info),
dimnames = list(std_info$name, c("mzmin", "mzmax", "rtmin", "rtmax")))
View(std_info)
for (i in 1:nrow(std_info)) {
pks <- chromPeaks(data_pos, mz = std_info$mz_ion[i], ppm = 50)
if (nrow(pks)) {
rtdiff <- abs(pks[, "rt"] - std_info$RT[i])
keep <- which(rtdiff < 40)
if (length(keep)) {
pks <- pks[keep, , drop = FALSE]
mzr <- range(pks[, c("mzmin", "mzmax")])
rtr <- range(pks[, c("rtmin", "rtmax")], std_info$RT[i])
std_info_mz_rt[i, ] <- c(mzr, rtr)
}
}
}
std_info <- std_info[!is.na(std_info_mz_rt[, "mzmin"]), ]
std_info_mz_rt <- std_info_mz_rt[!is.na(std_info_mz_rt[, "mzmin"]), ]
std_info_mz_rt
library(CompoundDb)
library(Rdisop)
std_info <- read.table("C:/Users/vveri/Documents/GitHub/lcms-standards/data/internal_standards.txt",
# "https://raw.githubusercontent.com/EuracBiomedicalResearch/lcms-standards/master/data/standards_dilution.txt",
## "data/standards_dilution.txt",
sep = "\t", header = TRUE, as.is = TRUE)
std_info <- std_info[!is.na(std_info[, "POS"]), ]
rownames(std_info) <- 1:nrow(std_info)
std_info$mzneut = NA
std_info$mz_ion = NA
for (i in seq(nrow(std_info))) {
if (grepl("C", std_info$formula[i])){
std_info$mzneut[i] <- getMolecule(
as.character(std_info$formula[i]))$exactmass
} else {
std_info$mzneut[i] = as.numeric(std_info$formula[i])
}
## Calculate also the m/z
std_info$mz_ion[i] <- unlist(
mass2mz(std_info$mzneut[i],
adduct = as.character(
std_info[i, "POS"])))
}
## Two-step approach: define first the rt/mz region for each standard and
## Extract the chromatogram afterwards.
std_info_mz_rt <- matrix(
ncol = 4, nrow = nrow(std_info),
dimnames = list(std_info$name, c("mzmin", "mzmax", "rtmin", "rtmax")))
for (i in 1:nrow(std_info)) {
pks <- chromPeaks(data_pos, mz = std_info$mz_ion[i], ppm = 50)
if (nrow(pks)) {
rtdiff <- abs(pks[, "rt"] - std_info$RT[i])
keep <- which(rtdiff < 40)
if (length(keep)) {
pks <- pks[keep, , drop = FALSE]
mzr <- range(pks[, c("mzmin", "mzmax")])
rtr <- range(pks[, c("rtmin", "rtmax")], std_info$RT[i])
std_info_mz_rt[i, ] <- c(mzr, rtr)
}
}
}
std_info <- std_info[!is.na(std_info_mz_rt[, "mzmin"]), ]
std_info_mz_rt <- std_info_mz_rt[!is.na(std_info_mz_rt[, "mzmin"]), ]
## Extract the ion chromatogram for each standard
rtr <- std_info_mz_rt[, c("rtmin", "rtmax")]
rtr[, 1] <- rtr[, 1] - 10
rtr[, 2] <- rtr[, 2] + 10
std_info_chr <- chromatogram(
data_pos, mz = std_info_mz_rt[, c("mzmin", "mzmax")],
rt = rtr, aggregationFun = "max")
## Plot the extracted ion chromatograms
dr <- paste0(IMAGE_PATH, "peakdetection/")
dir.create(dr, recursive = TRUE, showWarnings = FALSE)
sample_colors <- col_year_month[as.character(data_pos$year_month)]
for (i in 1:nrow(std_info)) {
cmpname <- gsub("L-", "", std_info$name[i])
cmpname <- tolower(gsub(" .*", "", cmpname))
filename <- paste0(dr, i, "-", cmpname, "_", "POS", ".png")
png(file = filename, width = 16, height = 8, units = "cm",
res = 300, pointsize = 4)
chr <- std_info_chr[i, ]
pks <- chromPeaks(chr)
plot(chr, col = "#00000040",
main = paste0(std_info$name[i], ": ",
format(mz(chr)[1], digits = 6), "-",
format(mz(chr)[2], digits = 6)),
peakCol = paste0(sample_colors[pks[, "column"]], 50),
peakBg = paste0(sample_colors[pks[, "column"]], 10))
## This is just to indicate identified peaks with a rectangle.
xcms:::.add_chromatogram_peaks(
chr, pks,
col = paste0(sample_colors[pks[, "column"]], 40),
bg = NA,
type = "rectangle")
abline(v = std_info$RT[i])
dev.off()
}
